test
https://www.liaoxuefeng.com/wiki/896043488029600/896827951938304
廖雪峰的官方网站（Git教程）
Git是目前世界上最先进的分布式版本控制系统（没有之一）。
安装Git:
	安装完成后，还需要最后一步设置，在命令行输入：
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"
	注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配	置，当然也可以对某个仓库指定不同的用户名和Email地址。
	使用git config --list命令就能看到你所有的设置
创建版本库:
	创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：

	$ mkdir learngit
	$ cd learngit
	$ pwd
	/Users/michael/learngit

	第二步，通过git init命令把这个目录变成Git可以管理的仓库：

	$ git init
	Initialized empty Git repository in /Users/michael/learngit/.git/

	现在我们编写一个readme.txt文件，内容如下：

	Git is a version control system.
	Git is free software.
	一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这	个文件。

	和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。

	第一步，用命令git add告诉Git，把文件添加到仓库：

	$ git add readme.txt
	执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。

	第二步，用命令git commit告诉Git，把文件提交到仓库：

	$ git commit -m "wrote a readme file"
	[master (root-commit) eaadf4e] wrote a readme file
	 1 file changed, 2 insertions(+)
 	create mode 100644 readme.txt
	简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义	的，这样你就能从历史记录里方便地找到改动记录。

小结：
	现在总结一下今天学的两点内容：

	初始化一个Git仓库，使用git init命令。

	添加文件到Git仓库，分两步：

	使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	使用命令git commit -m <message>，完成。

时光穿梭机：
	git status命令可以让我们时刻掌握仓库当前的状态
	git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式。如：
	$ git diff readme.txt 
	diff --git a/readme.txt b/readme.txt
	index 46d49bf..9247db6 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1,2 +1,2 @@
	-Git is a version control system.
	+Git is a distributed version control system.
	 Git is free software.

小结：
	要随时掌握工作区的状态，使用git status命令。

	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

版本回退：
	Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为	commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把	几个月的工作成果全部丢失。
	git log命令显示从最近到最远的提交日志。
	版本回退，首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交	1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然		往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	使用git reset命令：

	$ git reset --hard HEAD^
	HEAD is now at e475afc add distributed
	--hard参数有啥意义？这个后面再讲，现在你先放心使用。

	现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本	的commit id怎么办？

	在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再	想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一	次命令：

	$ git reflog
	e475afc HEAD@{1}: reset: moving to HEAD^
	1094adb (HEAD -> master) HEAD@{2}: commit: append GPL
	e475afc HEAD@{3}: commit: add distributed
	eaadf4e HEAD@{4}: commit (initial): wrote a readme file
	终于舒了口气，从输出可知，append GPL的commit id是1094adb，现在，你又可以乘坐时光机回到未来了。

小结：
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard co	mmit_id。

	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

撤销修改:
	Git会告诉你，git checkout -- file可以丢弃工作区的修改
	命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

	总之，就是让这个文件回到最近一次git commit或git add时的状态。

	git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支	管理中会再次遇到git checkout命令。


	假设文件已到暂存区，Git同样告诉我们，用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstag	e），重新放回工作区：

	$ git reset HEAD readme.txt
	Unstaged changes after reset:
	M	readme.txt
	git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

	再用git status查看一下，现在暂存区是干净的，工作区有修改。
	还记得如何丢弃工作区的修改吗？

	$ git checkout -- readme.txt

	$ git status
	On branch master
	nothing to commit, working tree clean
	整个世界终于清静了！

小结：
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令g	it reset HEAD <file>，就回到了场景1，第二步按场景1操作。

	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送		到远程库。

删除文件：
	在Git中，删除也是一个修改操作。
	一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了。
	这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文		件被删除了。
	现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

	$ git rm test.txt
	rm 'test.txt'

	$ git commit -m "remove test.txt"
	[master d46f35e] remove test.txt
 	1 file changed, 1 deletion(-)
 	delete mode 100644 test.txt
	现在，文件就从版本库中被删除了。
	另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

	$ git checkout -- test.txt
	git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
	注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！
小结：
	命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，	你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

添加远程库:
	我们根据GitHub的提示，在本地的learngit仓库下运行命令：

	$ git remote add origin git@github.com:wz9698/atcgit.git
	添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就	知道是远程库。
	下一步，就可以把本地库的所有内容推送到远程库上：

	$ git push -u origin master
	把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。

	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容	推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取	时就可以简化命令。
	从现在起，只要本地作了提交，就可以通过命令：

	$ git push origin master

删除远程库:
	如果添加的时候地址写错了，或者就是想删除远程库，可以用git remote rm <name>命令。使用前，建议		先用git remote -v查看远程库信息：

		$ git remote -v
		origin  git@github.com:michaelliao/learn-git.git (fetch)
		origin  git@github.com:michaelliao/learn-git.git (push)
		然后，根据名字删除，比如删除origin：

		$ git remote rm origin
	此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何		改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。

小结：
	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

	关联一个远程库时必须给远程库指定一个名字，origin是默认习惯命名；

	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改。

从远程库克隆:
	远程库已经准备好了，下一步是用命令git clone克隆一个本地库：

	$ git clone git@github.com:michaelliao/gitskills.git
	你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.g		it这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议	。

	使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的		公司内部就无法使用ssh协议而只能用https。

小结：
	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

	Git支持多种协议，包括https，但ssh协议速度最快。

